<#

  .SYNOPSIS
        
    .DESCRIPTION
        This script requires couple of parameters
        Commands Used:
        
        Explanation:
    .EXAMPLE
        # Direction - DOWN Example
        .\AzureAppServicePlan.ps1 -clientId "51cadbf9-ab74-43a0-9d99-5417ecc059a4" -tenantId "d9b63273-fc65-4fec-8893-b00bb60d7f80" -clientSecret "FiJ7Q~CJXksGUrAysTmivZuA~wbDYVsvMHtxV" -subscription "IAC-West" -resourceGroupName "app-settings-poc" -appServicePlanName "uktappsettingspocplan" -tier "Standard" -instanceCount 1 -scaleLevel "Small" -scalingDirection "DOWN"

        # Direction - UP Example
        .\AzureAppServicePlan.ps1 -clientId "51cadbf9-ab74-43a0-9d99-5417ecc059a4" -tenantId "d9b63273-fc65-4fec-8893-b00bb60d7f80" -clientSecret "FiJ7Q~CJXksGUrAysTmivZuA~wbDYVsvMHtxV" -subscription "IAC-West" -resourceGroupName "app-settings-poc" -appServicePlanName "uktappsettingspocplan" -tier "Standard" -instanceCount 5 -scaleLevel "Medium" -scalingDirection "UP"

#>

[CmdletBinding()]
param (
    [Parameter(Mandatory = $true)]
    [string]$clientId = "",

    [Parameter(Mandatory = $true)]
    [string]$tenantId = "",

    [Parameter(Mandatory = $true)]
    [string]$clientSecret = "" ,

    [Parameter(Mandatory = $true)]
    [string]$subscription = "",

    [Parameter(Mandatory = $true)]
    [string]$resourceGroupName = "",

    [Parameter(Mandatory = $true)]
    [string]$appServicePlanName = "",

    [Parameter(Mandatory = $true)]
    [ValidateSet("Premium","Standard","Basic","Isolated")]
	[String] $tier = "",


	[Parameter(Mandatory = $true)]
	[ValidateSet("Small","Medium","Large")]
    [String] $scaleLevel,

	[Parameter(Mandatory = $true)]
    [ValidateRange(1,10)]
	[Int] $instanceCount = 1,
        
	[Parameter(Mandatory = $false)]
    [ValidateSet("UP","DOWN")]
	[String] $scalingDirection = ""
)

# Client Secret
$clientSecretSecure = ConvertTo-SecureString $clientSecret -AsPlainText -Force

# Credential Object
$psCred = New-Object System.Management.Automation.PSCredential($clientId , $clientSecretSecure)
Connect-AzAccount -Credential $psCred -TenantId $tenantId  -ServicePrincipal 

Select-AzSubscription -Subscription $subscription

try {
    if ($scalingDirection -eq "DOWN")
    {
        Write-Host "Scaling In " $appServicePlanName -ForegroundColor Yellow
        # Scale In
        Set-AzAppServicePlan -ResourceGroupName $resourceGroupName -Name $appServicePlanName -NumberofWorkers $instanceCount

        Write-Host "Scaling Down " $appServicePlanName -ForegroundColor Yellow
        #Scale Down
        Set-AzAppServicePlan -ResourceGroupName $resourceGroupName -Name $appServicePlanName -Tier $tier -WorkerSize $scaleLevel

    }
    else {
        Write-Host "Scaling Up " $appServicePlanName -ForegroundColor Yellow
        # Scale Up
        Set-AzAppServicePlan -ResourceGroupName $resourceGroupName -Name $appServicePlanName -Tier $tier -WorkerSize $scaleLevel

        Write-Host "Scaling Out " $appServicePlanName -ForegroundColor Yellow
        # Scale Out
        Set-AzAppServicePlan -ResourceGroupName $resourceGroupName -Name $appServicePlanName -NumberofWorkers $instanceCount
    }
}
catch {
    Write-Error -Message $_.Exception
	throw $_.Exception
}
